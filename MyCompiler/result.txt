CONSTSYM const 1
FLOATSYM float 1
IDENT pi 1
BECOME = 1
FLOAT 3.14 1
SEMICOLON ; 1
CONSTSYM const 2
FLOATSYM float 2
IDENT fcon1 2
BECOME = 2
FLOAT 0.5 2
SEMICOLON ; 2
CONSTSYM const 3
INTSYM int 3
IDENT a 3
BECOME = 3
INTEGER -5 3
COMMA , 3
IDENT b 3
BECOME = 3
INTEGER +6 3
SEMICOLON ; 3
INTSYM int 4
IDENT c 4
LBRACK [ 4
INTEGER 2 4
LBRACK ] 4
COMMA , 4
IDENT res 4
COMMA , 4
IDENT d 4
LBRACK [ 4
INTEGER 3 4
LBRACK ] 4
SEMICOLON ; 4
FLOATSYM float 5
IDENT f1 5
COMMA , 5
IDENT _root 5
SEMICOLON ; 5
CHARSYM char 6
IDENT ch 6
SEMICOLON ; 6
INTSYM int 9
IDENT cal_fibonacci_val 9
LPARENT ( 9
INTSYM int 9
IDENT n 9
RPARENT ) 9
LBRACE { 9
IFSYM if 10
LPARENT ( 10
IDENT n 10
LESSEQUAL <= 10
INTEGER 2 10
RPARENT ) 10
RETURNSYM return 11
LPARENT ( 11
INTEGER 1 11
RPARENT ) 11
SEMICOLON ; 11
ELSESYM else 12
RETURNSYM return 13
LPARENT ( 13
IDENT cal_fibonacci_val 13
LPARENT ( 13
IDENT n 13
SUBSYM - 13
INTEGER 1 13
RPARENT ) 13
PLUSSYM + 13
IDENT cal_fibonacci_val 13
LPARENT ( 13
IDENT n 13
SUBSYM - 13
INTEGER 2 13
RPARENT ) 13
RPARENT ) 13
SEMICOLON ; 13
RBRACE } 14
VOIDSYM void 16
MAINSYM main 16
LPARENT ( 16
RPARENT ) 16
LBRACE { 16
PRINTFSYM printf 19
LPARENT ( 19
IDENT pi 19
RPARENT ) 19
SEMICOLON ; 19
PRINTFSYM printf 20
LPARENT ( 20
STRING "hahha" 20
RPARENT ) 20
SEMICOLON ; 20
PRINTFSYM printf 21
LPARENT ( 21
IDENT b 21
RPARENT ) 21
SEMICOLON ; 21
RBRACE } 22
