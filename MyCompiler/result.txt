INTSYM int 1
IDENT a 1
LBRACK [ 1
INTEGER 8 1
LBRACK ] 1
SEMICOLON ; 1
INTSYM int 3
IDENT partition 3
LPARENT ( 3
INTSYM int 3
IDENT p 3
COMMA , 3
INTSYM int 3
IDENT r 3
RPARENT ) 3
LBRACE { 3
INTSYM int 4
IDENT x 4
COMMA , 4
IDENT i 4
COMMA , 4
IDENT j 4
SEMICOLON ; 4
INTSYM int 5
IDENT temp 5
SEMICOLON ; 5
IDENT x 7
BECOME = 7
IDENT a 7
LBRACK [ 7
IDENT r 7
LBRACK ] 7
SEMICOLON ; 7
IDENT i 8
BECOME = 8
IDENT p 8
SUBSYM - 8
INTEGER 1 8
SEMICOLON ; 8
IDENT j 10
BECOME = 10
IDENT p 10
SEMICOLON ; 10
WHILESYM while 11
LPARENT ( 11
IDENT j 11
LESSEQUAL <= 11
IDENT r 11
SUBSYM - 11
INTEGER 1 11
RPARENT ) 11
LBRACE { 11
IFSYM if 12
LPARENT ( 12
IDENT a 12
LBRACK [ 12
IDENT j 12
LBRACK ] 12
LESSEQUAL <= 12
IDENT x 12
RPARENT ) 12
LBRACE { 12
IDENT i 13
BECOME = 13
IDENT i 13
PLUSSYM + 13
INTEGER 1 13
SEMICOLON ; 13
IDENT temp 14
BECOME = 14
IDENT a 14
LBRACK [ 14
IDENT i 14
LBRACK ] 14
SEMICOLON ; 14
IDENT a 15
LBRACK [ 15
IDENT i 15
LBRACK ] 15
BECOME = 15
IDENT a 15
LBRACK [ 15
IDENT j 15
LBRACK ] 15
SEMICOLON ; 15
IDENT a 16
LBRACK [ 16
IDENT j 16
LBRACK ] 16
BECOME = 16
IDENT temp 16
SEMICOLON ; 16
RBRACE } 17
IDENT j 18
BECOME = 18
IDENT j 18
PLUSSYM + 18
INTEGER 1 18
SEMICOLON ; 18
RBRACE } 19
IDENT a 21
LBRACK [ 21
IDENT r 21
LBRACK ] 21
BECOME = 21
IDENT a 21
LBRACK [ 21
IDENT i 21
PLUSSYM + 21
INTEGER 1 21
LBRACK ] 21
SEMICOLON ; 21
IDENT a 22
LBRACK [ 22
IDENT i 22
PLUSSYM + 22
INTEGER 1 22
LBRACK ] 22
BECOME = 22
IDENT x 22
SEMICOLON ; 22
RETURNSYM return 24
LPARENT ( 24
IDENT i 24
PLUSSYM + 24
INTEGER 1 24
RPARENT ) 24
SEMICOLON ; 24
RBRACE } 25
VOIDSYM void 27
IDENT quick_sort 27
LPARENT ( 27
INTSYM int 27
IDENT p 27
COMMA , 27
INTSYM int 27
IDENT r 27
RPARENT ) 27
LBRACE { 27
INTSYM int 28
IDENT q 28
SEMICOLON ; 28
IFSYM if 30
LPARENT ( 30
IDENT p 30
LESS < 30
IDENT r 30
RPARENT ) 30
LBRACE { 30
IDENT q 31
BECOME = 31
IDENT partition 31
LPARENT ( 31
IDENT p 31
COMMA , 31
IDENT r 31
RPARENT ) 31
SEMICOLON ; 31
IDENT quick_sort 32
LPARENT ( 32
IDENT p 32
COMMA , 32
IDENT q 32
SUBSYM - 32
INTEGER 1 32
RPARENT ) 32
SEMICOLON ; 32
IDENT quick_sort 33
LPARENT ( 33
IDENT q 33
PLUSSYM + 33
INTEGER 1 33
COMMA , 33
IDENT r 33
RPARENT ) 33
SEMICOLON ; 33
RBRACE } 34
RBRACE } 35
VOIDSYM void 37
MAINSYM main 37
LPARENT ( 37
RPARENT ) 37
LBRACE { 38
INTSYM int 39
IDENT i1 39
COMMA , 39
IDENT len 39
SEMICOLON ; 39
IDENT a 40
LBRACK [ 40
INTEGER 0 40
LBRACK ] 40
BECOME = 40
INTEGER 21 40
SEMICOLON ; 40
IDENT a 41
LBRACK [ 41
INTEGER 1 41
LBRACK ] 41
BECOME = 41
INTEGER 85 41
SEMICOLON ; 41
IDENT a 42
LBRACK [ 42
INTEGER 2 42
LBRACK ] 42
BECOME = 42
INTEGER 17 42
SEMICOLON ; 42
IDENT a 43
LBRACK [ 43
INTEGER 3 43
LBRACK ] 43
BECOME = 43
INTEGER 10 43
SEMICOLON ; 43
IDENT a 44
LBRACK [ 44
INTEGER 4 44
LBRACK ] 44
BECOME = 44
INTEGER 51 44
SEMICOLON ; 44
IDENT a 45
LBRACK [ 45
INTEGER 5 45
LBRACK ] 45
BECOME = 45
INTEGER 51 45
SEMICOLON ; 45
IDENT a 46
LBRACK [ 46
INTEGER 6 46
LBRACK ] 46
BECOME = 46
INTEGER 666 46
SEMICOLON ; 46
IDENT a 47
LBRACK [ 47
INTEGER 7 47
LBRACK ] 47
BECOME = 47
INTEGER 47 47
SEMICOLON ; 47
IDENT len 49
BECOME = 49
INTEGER 8 49
SEMICOLON ; 49
IDENT quick_sort 51
LPARENT ( 51
INTEGER 0 51
COMMA , 51
IDENT len 51
SUBSYM - 51
INTEGER 1 51
RPARENT ) 51
SEMICOLON ; 51
IDENT i1 53
BECOME = 53
INTEGER 0 53
SEMICOLON ; 53
WHILESYM while 54
LPARENT ( 54
IDENT i1 54
LESS < 54
IDENT len 54
RPARENT ) 54
LBRACE { 54
PRINTFSYM printf 55
LPARENT ( 55
STRING "--" 55
COMMA , 55
IDENT a 55
LBRACK [ 55
IDENT i1 55
LBRACK ] 55
RPARENT ) 55
SEMICOLON ; 55
IDENT i1 56
BECOME = 56
IDENT i1 56
PLUSSYM + 56
INTEGER 1 56
SEMICOLON ; 56
RBRACE } 56
RBRACE } 60
