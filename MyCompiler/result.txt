CONSTSYM const 1
FLOATSYM float 1
IDENT pi 1
BECOME = 1
FLOAT 3.14 1
SEMICOLON ; 1
CONSTSYM const 2
INTSYM int 2
IDENT a 2
BECOME = 2
INTEGER 5 2
COMMA , 2
IDENT b 2
BECOME = 2
INTEGER 6 2
SEMICOLON ; 2
INTSYM int 3
IDENT c 3
LBRACK [ 3
INTEGER 2 3
LBRACK ] 3
COMMA , 3
IDENT res 3
COMMA , 3
IDENT d 3
LBRACK [ 3
INTEGER 3 3
LBRACK ] 3
SEMICOLON ; 3
FLOATSYM float 4
IDENT f1 4
COMMA , 4
IDENT _root 4
SEMICOLON ; 4
CHARSYM char 5
IDENT ch 5
SEMICOLON ; 5
INTSYM int 6
IDENT add_two_nums 6
LPARENT ( 6
INTSYM int 6
IDENT a1 6
COMMA , 6
INTSYM int 6
IDENT a2 6
RPARENT ) 6
LBRACE { 6
RETURNSYM return 7
LPARENT ( 7
IDENT a1 7
PLUSSYM + 7
IDENT a2 7
RPARENT ) 7
SEMICOLON ; 7
RBRACE } 8
VOIDSYM void 9
MAINSYM main 9
LPARENT ( 9
RPARENT ) 9
LBRACE { 9
CONSTSYM const 10
FLOATSYM float 10
IDENT e 10
BECOME = 10
FLOAT 2.71 10
SEMICOLON ; 10
CHARSYM char 11
IDENT ch1 11
COMMA , 11
IDENT ch2 11
SEMICOLON ; 11
FLOATSYM float 12
IDENT sml_num 12
SEMICOLON ; 12
INTSYM int 13
IDENT x 13
COMMA , 13
IDENT y 13
SEMICOLON ; 13
INTSYM int 14
IDENT i 14
SEMICOLON ; 14
SCANFSYM scanf 15
LPARENT ( 15
IDENT x 15
COMMA , 15
IDENT y 15
RPARENT ) 15
SEMICOLON ; 15
IDENT i 16
BECOME = 16
IDENT add_two_nums 16
LPARENT ( 16
IDENT x 16
COMMA , 16
IDENT y 16
RPARENT ) 16
SEMICOLON ; 16
RBRACE } 17
