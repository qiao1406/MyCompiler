CONSTSYM const 1
INTSYM int 1
IDENT icon1 1
BECOME = 1
INTEGER +1 1
COMMA , 1
IDENT MAX 1
BECOME = 1
INTEGER 10 1
SEMICOLON ; 1
CONSTSYM const 2
INTSYM int 2
IDENT icon2 2
BECOME = 2
INTEGER -2 2
COMMA , 2
IDENT icon3 2
BECOME = 2
INTEGER 3 2
SEMICOLON ; 2
CONSTSYM const 3
FLOATSYM float 3
IDENT fcon1 3
BECOME = 3
FLOAT 0.5 3
COMMA , 3
IDENT fcon2 3
BECOME = 3
FLOAT 1. 3
COMMA , 3
IDENT fcon3 3
BECOME = 3
FLOAT -3.4 3
SEMICOLON ; 3
CONSTSYM const 4
CHARSYM char 4
IDENT ccon1 4
BECOME = 4
CHARACTER 'A' 4
SEMICOLON ; 4
CHARSYM char 5
IDENT gcvar1 5
SEMICOLON ; 5
INTSYM int 6
IDENT givar1 6
COMMA , 6
IDENT givar2 6
SEMICOLON ; 6
FLOATSYM float 7
IDENT gfvar1 7
COMMA , 7
IDENT gfvar2 7
SEMICOLON ; 7
INTSYM int 9
IDENT gis 9
LBRACK [ 9
INTEGER 10 9
LBRACK ] 9
SEMICOLON ; 9
FLOATSYM float 10
IDENT gfs 10
LBRACK [ 10
INTEGER 10 10
LBRACK ] 10
SEMICOLON ; 10
CHARSYM char 11
IDENT gcs 11
LBRACK [ 11
INTEGER 10 11
LBRACK ] 11
SEMICOLON ; 11
VOIDSYM void 13
IDENT test4 13
LPARENT ( 13
RPARENT ) 13
LBRACE { 14
CONSTSYM const 15
INTSYM int 15
IDENT icon1 15
BECOME = 15
INTEGER +2 15
COMMA , 15
IDENT MAX 15
BECOME = 15
INTEGER 9 15
SEMICOLON ; 15
PRINTFSYM printf 16
LPARENT ( 16
STRING " " 16
COMMA , 16
IDENT icon1 16
RPARENT ) 16
SEMICOLON ; 16
PRINTFSYM printf 17
LPARENT ( 17
STRING " " 17
COMMA , 17
IDENT MAX 17
RPARENT ) 17
SEMICOLON ; 17
RBRACE } 18
VOIDSYM void 20
IDENT test9 20
LPARENT ( 20
RPARENT ) 20
LBRACE { 21
INTSYM int 22
IDENT n1 22
COMMA , 22
IDENT n2 22
COMMA , 22
IDENT n3 22
SEMICOLON ; 22
FLOATSYM float 23
IDENT f1 23
COMMA , 23
IDENT f2 23
COMMA , 23
IDENT f3 23
SEMICOLON ; 23
CHARSYM char 24
IDENT c1 24
COMMA , 24
IDENT c2 24
COMMA , 24
IDENT c3 24
SEMICOLON ; 24
IDENT n1 25
BECOME = 25
INTEGER +0 25
SEMICOLON ; 25
PRINTFSYM printf 26
LPARENT ( 26
STRING " 1:n1=" 26
COMMA , 26
IDENT n1 26
RPARENT ) 26
SEMICOLON ; 26
IDENT n2 27
BECOME = 27
INTEGER -0 27
SEMICOLON ; 27
PRINTFSYM printf 28
LPARENT ( 28
STRING " 2:n2=" 28
COMMA , 28
IDENT n2 28
RPARENT ) 28
SEMICOLON ; 28
IDENT n3 29
BECOME = 29
INTEGER -3 29
SEMICOLON ; 29
PRINTFSYM printf 30
LPARENT ( 30
STRING " 3:n3=" 30
COMMA , 30
IDENT n3 30
RPARENT ) 30
SEMICOLON ; 30
IDENT n1 31
BECOME = 31
INTEGER +3 31
SEMICOLON ; 31
PRINTFSYM printf 32
LPARENT ( 32
STRING " 4:n1=" 32
COMMA , 32
IDENT n1 32
RPARENT ) 32
SEMICOLON ; 32
IDENT n1 33
BECOME = 33
INTEGER 1 33
PLUSSYM + 33
INTEGER 2 33
MULSYM * 33
INTEGER 3 33
SEMICOLON ; 33
PRINTFSYM printf 34
LPARENT ( 34
STRING " 5:n1=" 34
COMMA , 34
IDENT n1 34
RPARENT ) 34
SEMICOLON ; 34
IDENT n1 35
BECOME = 35
INTEGER 100 35
MULSYM * 35
LPARENT ( 35
LPARENT ( 35
INTEGER 2 35
PLUSSYM + 35
INTEGER 3 35
RPARENT ) 35
MULSYM * 35
INTEGER 3 35
RPARENT ) 35
SEMICOLON ; 35
PRINTFSYM printf 36
LPARENT ( 36
STRING " 6:n1=" 36
COMMA , 36
IDENT n1 36
RPARENT ) 36
SEMICOLON ; 36
IDENT n1 37
BECOME = 37
INTEGER 2 37
MULSYM * 37
LPARENT ( 37
LPARENT ( 37
INTEGER 3 37
PLUSSYM + 37
INTEGER 3 37
RPARENT ) 37
DIVSYM / 37
INTEGER 3 37
RPARENT ) 37
SEMICOLON ; 37
PRINTFSYM printf 38
LPARENT ( 38
STRING " 7:n1=" 38
COMMA , 38
IDENT n1 38
RPARENT ) 38
SEMICOLON ; 38
IDENT f1 39
BECOME = 39
FLOAT 1 39
SEMICOLON ; 39
PRINTFSYM printf 40
LPARENT ( 40
STRING " 8:f1=" 40
COMMA , 40
IDENT f1 40
RPARENT ) 40
SEMICOLON ; 40
IDENT f1 41
BECOME = 41
FLOAT 1 41
SEMICOLON ; 41
PRINTFSYM printf 42
LPARENT ( 42
STRING " 9:f1=" 42
COMMA , 42
IDENT f1 42
RPARENT ) 42
SEMICOLON ; 42
IDENT f1 43
BECOME = 43
SUBSYM - 43
IDENT f1 43
MULSYM * 43
LPARENT ( 43
FLOAT 0.5 43
RPARENT ) 43
DIVSYM / 43
LPARENT ( 43
FLOAT -0.5 43
RPARENT ) 43
MULSYM * 43
LPARENT ( 43
FLOAT -1 43
RPARENT ) 43
SEMICOLON ; 43
PRINTFSYM printf 44
LPARENT ( 44
STRING " 10:f1=" 44
COMMA , 44
IDENT f1 44
RPARENT ) 44
SEMICOLON ; 44
IDENT c1 45
BECOME = 45
CHARACTER 'b' 45
SEMICOLON ; 45
IDENT n1 46
BECOME = 46
IDENT c1 46
PLUSSYM + 46
LPARENT ( 46
INTEGER -1 46
RPARENT ) 46
SEMICOLON ; 46
PRINTFSYM printf 47
LPARENT ( 47
STRING " 11:n1=" 47
COMMA , 47
IDENT n1 47
RPARENT ) 47
SEMICOLON ; 47
IDENT f1 48
BECOME = 48
IDENT c1 48
MULSYM * 48
FLOAT 0.5 48
SEMICOLON ; 48
PRINTFSYM printf 49
LPARENT ( 49
STRING " 12:f1=" 49
COMMA , 49
IDENT f1 49
RPARENT ) 49
SEMICOLON ; 49
RBRACE } 50
VOIDSYM void 52
IDENT test10 52
LPARENT ( 52
RPARENT ) 52
LBRACE { 53
INTSYM int 54
IDENT i 54
SEMICOLON ; 54
IDENT i 55
BECOME = 55
INTEGER 0 55
SEMICOLON ; 55
IDENT givar1 56
BECOME = 56
INTEGER 2 56
SEMICOLON ; 56
IDENT givar2 57
BECOME = 57
INTEGER 3 57
SEMICOLON ; 57
IDENT gfvar1 58
BECOME = 58
IDENT fcon1 58
SEMICOLON ; 58
IDENT gfvar2 59
BECOME = 59
IDENT fcon2 59
SEMICOLON ; 59
IDENT gcvar1 60
BECOME = 60
IDENT ccon1 60
SEMICOLON ; 60
WHILESYM while 61
LPARENT ( 61
IDENT i 61
LESS < 61
IDENT MAX 61
RPARENT ) 61
LBRACE { 62
IDENT gis 63
LBRACK [ 63
IDENT i 63
LBRACK ] 63
BECOME = 63
IDENT i 63
PLUSSYM + 63
INTEGER 1 63
SEMICOLON ; 63
IDENT gfs 64
LBRACK [ 64
IDENT i 64
LBRACK ] 64
BECOME = 64
IDENT i 64
DIVSYM / 64
INTEGER 10 64
SEMICOLON ; 64
IDENT gcs 65
LBRACK [ 65
IDENT i 65
LBRACK ] 65
BECOME = 65
CHARACTER 'a' 65
PLUSSYM + 65
IDENT i 65
SEMICOLON ; 65
IDENT i 66
BECOME = 66
IDENT i 66
PLUSSYM + 66
INTEGER 1 66
SEMICOLON ; 66
RBRACE } 67
RBRACE } 68
VOIDSYM void 69
IDENT test11 69
LPARENT ( 69
RPARENT ) 69
LBRACE { 70
INTSYM int 71
IDENT i 71
SEMICOLON ; 71
IDENT i 72
BECOME = 72
INTEGER 0 72
SEMICOLON ; 72
PRINTFSYM printf 74
LPARENT ( 74
STRING " 1:givar1=" 74
COMMA , 74
IDENT givar1 74
RPARENT ) 74
SEMICOLON ; 74
PRINTFSYM printf 75
LPARENT ( 75
STRING " 2:givar2=" 75
COMMA , 75
IDENT givar2 75
RPARENT ) 75
SEMICOLON ; 75
PRINTFSYM printf 76
LPARENT ( 76
STRING " 3:gfvar1=" 76
COMMA , 76
IDENT gfvar1 76
RPARENT ) 76
SEMICOLON ; 76
PRINTFSYM printf 77
LPARENT ( 77
STRING " 4:gfvar2=" 77
COMMA , 77
IDENT gfvar2 77
RPARENT ) 77
SEMICOLON ; 77
PRINTFSYM printf 78
LPARENT ( 78
STRING " 5:gcvar1=" 78
COMMA , 78
IDENT gcvar1 78
RPARENT ) 78
SEMICOLON ; 78
WHILESYM while 79
LPARENT ( 79
IDENT i 79
LESS < 79
IDENT MAX 79
RPARENT ) 79
LBRACE { 80
PRINTFSYM printf 81
LPARENT ( 81
STRING " " 81
COMMA , 81
IDENT gis 81
LBRACK [ 81
IDENT i 81
LBRACK ] 81
RPARENT ) 81
SEMICOLON ; 81
PRINTFSYM printf 82
LPARENT ( 82
STRING " " 82
COMMA , 82
IDENT gfs 82
LBRACK [ 82
IDENT i 82
LBRACK ] 82
RPARENT ) 82
SEMICOLON ; 82
PRINTFSYM printf 83
LPARENT ( 83
STRING " " 83
COMMA , 83
IDENT gcs 83
LBRACK [ 83
IDENT i 83
LBRACK ] 83
RPARENT ) 83
SEMICOLON ; 83
IDENT i 84
BECOME = 84
IDENT i 84
PLUSSYM + 84
INTEGER 1 84
SEMICOLON ; 84
RBRACE } 85
RBRACE } 86
INTSYM int 88
IDENT test12 88
LPARENT ( 88
INTSYM int 88
IDENT n 88
RPARENT ) 88
LBRACE { 89
PRINTFSYM printf 90
LPARENT ( 90
IDENT n 90
RPARENT ) 90
SEMICOLON ; 90
RETURNSYM return 91
LPARENT ( 91
IDENT n 91
SUBSYM - 91
INTEGER 1 91
RPARENT ) 91
SEMICOLON ; 91
RBRACE } 92
FLOATSYM float 95
IDENT test13 95
LPARENT ( 95
INTSYM int 95
IDENT n 95
COMMA , 95
FLOATSYM float 95
IDENT f 95
COMMA , 95
CHARSYM char 95
IDENT ch 95
RPARENT ) 95
LBRACE { 96
RETURNSYM return 97
LPARENT ( 97
IDENT n 97
PLUSSYM + 97
IDENT f 97
PLUSSYM + 97
IDENT ch 97
RPARENT ) 97
SEMICOLON ; 97
RBRACE } 98
INTSYM int 99
IDENT test14 99
LPARENT ( 99
INTSYM int 99
IDENT n 99
RPARENT ) 99
LBRACE { 100
RETURNSYM return 101
LPARENT ( 101
IDENT n 101
PLUSSYM + 101
INTEGER 2 101
RPARENT ) 101
SEMICOLON ; 101
RBRACE } 102
CHARSYM char 103
IDENT test15 103
LPARENT ( 103
RPARENT ) 103
LBRACE { 104
RETURNSYM return 105
LPARENT ( 105
CHARACTER 'a' 105
RPARENT ) 105
SEMICOLON ; 105
RBRACE } 106
VOIDSYM void 108
IDENT Test1 108
LPARENT ( 108
INTSYM int 108
IDENT p1 108
COMMA , 108
CHARSYM char 108
IDENT p2 108
COMMA , 108
FLOATSYM float 108
IDENT p3 108
RPARENT ) 108
LBRACE { 109
CONSTSYM const 110
INTSYM int 110
IDENT MAX 110
BECOME = 110
INTEGER 20 110
COMMA , 110
IDENT MIN 110
BECOME = 110
INTEGER 0 110
SEMICOLON ; 110
CONSTSYM const 111
CHARSYM char 111
IDENT grade 111
BECOME = 111
CHARACTER 'A' 111
SEMICOLON ; 111
CONSTSYM const 112
FLOATSYM float 112
IDENT PAI 112
BECOME = 112
FLOAT 3.14 112
SEMICOLON ; 112
INTSYM int 113
IDENT i 113
SEMICOLON ; 113
IDENT i 114
BECOME = 114
INTEGER 1 114
PLUSSYM + 114
INTEGER 1 114
SEMICOLON ; 114
IFSYM if 115
LPARENT ( 115
INTEGER 1 115
LESSEQUAL <= 115
INTEGER 1 115
RPARENT ) 115
IFSYM if 116
LPARENT ( 116
INTEGER 0 116
NEQUAL != 116
INTEGER 1 116
RPARENT ) 116
IFSYM if 117
LPARENT ( 117
INTEGER 0 117
EQUAL == 117
INTEGER 0 117
RPARENT ) 117
IFSYM if 118
LPARENT ( 118
INTEGER 1 118
GREATER > 118
INTEGER 0 118
RPARENT ) 118
IFSYM if 119
LPARENT ( 119
INTEGER 1 119
GREATEREQUAL >= 119
INTEGER 0 119
RPARENT ) 119
IDENT i 120
BECOME = 120
INTEGER 1 120
MULSYM * 120
INTEGER 1 120
SEMICOLON ; 120
PRINTFSYM printf 121
LPARENT ( 121
IDENT i 121
RPARENT ) 121
SEMICOLON ; 121
RBRACE } 122
VOIDSYM void 124
IDENT TEst_2 124
LPARENT ( 124
INTSYM int 124
IDENT n 124
RPARENT ) 124
LBRACE { 125
IFSYM if 126
LPARENT ( 126
IDENT n 126
GREATER > 126
INTEGER 0 126
RPARENT ) 126
LBRACE { 127
PRINTFSYM printf 128
LPARENT ( 128
STRING " " 128
COMMA , 128
IDENT n 128
RPARENT ) 128
SEMICOLON ; 128
IDENT test_2 129
LPARENT ( 129
IDENT n 129
SUBSYM - 129
INTEGER 1 129
RPARENT ) 129
SEMICOLON ; 129
RBRACE } 130
ELSESYM else 131
RETURNSYM return 132
SEMICOLON ; 132
RBRACE } 133
VOIDSYM void 135
IDENT test3 135
LPARENT ( 135
RPARENT ) 135
LBRACE { 136
CHARSYM char 137
IDENT chs 137
LBRACK [ 137
INTEGER 4 137
LBRACK ] 137
SEMICOLON ; 137
CHARSYM char 138
IDENT ch 138
SEMICOLON ; 138
IDENT chs 139
LBRACK [ 139
INTEGER 0 139
LBRACK ] 139
BECOME = 139
CHARACTER 'a' 139
SEMICOLON ; 139
IDENT ch 140
BECOME = 140
CHARACTER 'b' 140
SEMICOLON ; 140
PRINTFSYM printf 141
LPARENT ( 141
STRING " " 141
COMMA , 141
SUBSYM - 141
IDENT ch 141
RPARENT ) 141
SEMICOLON ; 141
PRINTFSYM printf 142
LPARENT ( 142
STRING " " 142
COMMA , 142
IDENT ch 142
RPARENT ) 142
SEMICOLON ; 142
PRINTFSYM printf 143
LPARENT ( 143
STRING " " 143
COMMA , 143
IDENT chs 143
LBRACK [ 143
INTEGER 0 143
LBRACK ] 143
PLUSSYM + 143
IDENT ch 143
RPARENT ) 143
SEMICOLON ; 143
PRINTFSYM printf 144
LPARENT ( 144
STRING " " 144
COMMA , 144
CHARACTER 'a' 144
RPARENT ) 144
SEMICOLON ; 144
PRINTFSYM printf 145
LPARENT ( 145
STRING " " 145
COMMA , 145
SUBSYM - 145
CHARACTER 'a' 145
RPARENT ) 145
SEMICOLON ; 145
RBRACE } 146
FLOATSYM float 148
IDENT test6 148
LPARENT ( 148
RPARENT ) 148
LBRACE { 149
INTSYM int 150
IDENT i 150
SEMICOLON ; 150
IDENT i 151
BECOME = 151
INTEGER 0 151
SEMICOLON ; 151
WHILESYM while 152
LPARENT ( 152
IDENT i 152
LESS < 152
INTEGER 1 152
RPARENT ) 152
LBRACE { 153
IDENT i 154
BECOME = 154
IDENT i 154
PLUSSYM + 154
INTEGER 1 154
SEMICOLON ; 154
IFSYM if 155
LPARENT ( 155
IDENT i 155
EQUAL == 155
INTEGER 1 155
RPARENT ) 155
SWITCHSYM switch 156
LPARENT ( 156
IDENT i 156
RPARENT ) 156
LBRACE { 157
CASESYM case 158
INTEGER 1 158
COLON : 158
IFSYM if 159
LPARENT ( 159
IDENT i 159
EQUAL == 159
INTEGER 1 159
RPARENT ) 159
WHILESYM while 160
LPARENT ( 160
IDENT i 160
EQUAL == 160
INTEGER 1 160
RPARENT ) 160
LBRACE { 161
RETURNSYM return 162
LPARENT ( 162
FLOAT 1.0 162
RPARENT ) 162
SEMICOLON ; 162
RBRACE } 163
RBRACE } 164
RBRACE } 165
RBRACE } 166
INTSYM int 168
IDENT test17 168
LPARENT ( 168
RPARENT ) 168
LBRACE { 169
RETURNSYM return 170
LPARENT ( 170
INTEGER 1 170
RPARENT ) 170
SEMICOLON ; 170
RBRACE } 171
INTSYM int 172
IDENT test19 172
LPARENT ( 172
INTSYM int 172
IDENT a 172
COMMA , 172
INTSYM int 172
IDENT b 172
RPARENT ) 172
LBRACE { 173
RETURNSYM return 174
LPARENT ( 174
IDENT a 174
PLUSSYM + 174
IDENT b 174
RPARENT ) 174
SEMICOLON ; 174
RBRACE } 175
FLOATSYM float 177
IDENT test18 177
LPARENT ( 177
RPARENT ) 177
LBRACE { 178
IDENT gfs 179
LBRACK [ 179
INTEGER 0 179
LBRACK ] 179
BECOME = 179
FLOAT 0.1 179
SEMICOLON ; 179
IDENT gfs 180
LBRACK [ 180
INTEGER 1 180
LBRACK ] 180
BECOME = 180
FLOAT 0.2 180
SEMICOLON ; 180
IDENT gfs 181
LBRACK [ 181
INTEGER 2 181
LBRACK ] 181
BECOME = 181
FLOAT 0.3 181
SEMICOLON ; 181
IDENT gfs 182
LBRACK [ 182
INTEGER 3 182
LBRACK ] 182
BECOME = 182
IDENT gfs 182
LBRACK [ 182
IDENT test17 182
LPARENT ( 182
RPARENT ) 182
LBRACK ] 182
PLUSSYM + 182
IDENT gfs 182
LBRACK [ 182
IDENT test17 182
LPARENT ( 182
RPARENT ) 182
MULSYM * 182
IDENT test19 182
LPARENT ( 182
INTEGER 1 182
COMMA , 182
INTEGER 1 182
RPARENT ) 182
LBRACK ] 182
SEMICOLON ; 182
PRINTFSYM printf 183
LPARENT ( 183
IDENT gfs 183
LBRACK [ 183
INTEGER 3 183
LBRACK ] 183
RPARENT ) 183
SEMICOLON ; 183
RETURNSYM return 184
LPARENT ( 184
IDENT gfs 184
LBRACK [ 184
INTEGER 3 184
LBRACK ] 184
RPARENT ) 184
SEMICOLON ; 184
RBRACE } 185
VOIDSYM void 187
IDENT test20 187
LPARENT ( 187
RPARENT ) 187
LBRACE { 188
IDENT gis 189
LBRACK [ 189
INTEGER 0 189
LBRACK ] 189
BECOME = 189
INTEGER 1 189
SEMICOLON ; 189
IDENT gis 190
LBRACK [ 190
INTEGER 1 190
LBRACK ] 190
BECOME = 190
INTEGER 2 190
SEMICOLON ; 190
IDENT gis 191
LBRACK [ 191
INTEGER 2 191
LBRACK ] 191
BECOME = 191
INTEGER 3 191
SEMICOLON ; 191
IDENT gis 192
LBRACK [ 192
INTEGER 3 192
LBRACK ] 192
BECOME = 192
INTEGER 4 192
SEMICOLON ; 192
PRINTFSYM printf 193
LPARENT ( 193
IDENT gis 193
LBRACK [ 193
IDENT gis 193
LBRACK [ 193
IDENT gis 193
LBRACK [ 193
INTEGER 0 193
LBRACK ] 193
LBRACK ] 193
LBRACK ] 193
RPARENT ) 193
SEMICOLON ; 193
RBRACE } 194
VOIDSYM void 196
IDENT test21 196
LPARENT ( 196
RPARENT ) 196
LBRACE { 197
INTSYM int 198
IDENT i 198
SEMICOLON ; 198
IDENT i 199
BECOME = 199
INTEGER 1 199
SEMICOLON ; 199
PRINTFSYM printf 200
LPARENT ( 200
STRING "test21" 200
RPARENT ) 200
SEMICOLON ; 200
PRINTFSYM printf 201
LPARENT ( 201
STRING " 1: " 201
RPARENT ) 201
SEMICOLON ; 201
IFSYM if 202
LPARENT ( 202
INTEGER 1 202
RPARENT ) 202
WHILESYM while 203
LPARENT ( 203
IDENT i 203
RPARENT ) 203
IDENT i 204
BECOME = 204
INTEGER 0 204
SEMICOLON ; 204
PRINTFSYM printf 205
LPARENT ( 205
STRING " 2: " 205
RPARENT ) 205
SEMICOLON ; 205
IFSYM if 206
LPARENT ( 206
INTEGER 1 206
RPARENT ) 206
LBRACE { 207
RBRACE } 209
PRINTFSYM printf 210
LPARENT ( 210
STRING " 3: " 210
RPARENT ) 210
SEMICOLON ; 210
IFSYM if 211
LPARENT ( 211
INTEGER 1 211
RPARENT ) 211
IDENT test20 212
LPARENT ( 212
RPARENT ) 212
SEMICOLON ; 212
PRINTFSYM printf 213
LPARENT ( 213
STRING " 4: " 213
RPARENT ) 213
SEMICOLON ; 213
IFSYM if 214
LPARENT ( 214
INTEGER 1 214
RPARENT ) 214
IDENT i 215
BECOME = 215
INTEGER 2 215
SEMICOLON ; 215
PRINTFSYM printf 216
LPARENT ( 216
STRING " 5: " 216
RPARENT ) 216
SEMICOLON ; 216
IFSYM if 217
LPARENT ( 217
INTEGER 1 217
RPARENT ) 217
SCANFSYM scanf 218
LPARENT ( 218
IDENT i 218
RPARENT ) 218
SEMICOLON ; 218
PRINTFSYM printf 219
LPARENT ( 219
STRING " 6: " 219
RPARENT ) 219
SEMICOLON ; 219
IFSYM if 220
LPARENT ( 220
INTEGER 1 220
RPARENT ) 220
PRINTFSYM printf 221
LPARENT ( 221
IDENT i 221
RPARENT ) 221
SEMICOLON ; 221
PRINTFSYM printf 222
LPARENT ( 222
STRING " 7: " 222
RPARENT ) 222
SEMICOLON ; 222
IFSYM if 223
LPARENT ( 223
INTEGER 1 223
RPARENT ) 223
SWITCHSYM switch 224
LPARENT ( 224
IDENT i 224
RPARENT ) 224
LBRACE { 225
CASESYM case 226
INTEGER 1 226
COLON : 226
PRINTFSYM printf 226
LPARENT ( 226
STRING "111 " 226
RPARENT ) 226
SEMICOLON ; 226
CASESYM case 227
INTEGER 2 227
COLON : 227
PRINTFSYM printf 227
LPARENT ( 227
STRING "222 " 227
RPARENT ) 227
SEMICOLON ; 227
RBRACE } 228
PRINTFSYM printf 229
LPARENT ( 229
STRING " 8: " 229
RPARENT ) 229
SEMICOLON ; 229
IFSYM if 230
LPARENT ( 230
INTEGER 1 230
RPARENT ) 230
SEMICOLON ; 230
PRINTFSYM printf 231
LPARENT ( 231
STRING " 9: " 231
RPARENT ) 231
SEMICOLON ; 231
IFSYM if 232
LPARENT ( 232
INTEGER 0 232
RPARENT ) 232
SEMICOLON ; 233
ELSESYM else 234
SEMICOLON ; 235
PRINTFSYM printf 236
LPARENT ( 236
STRING " 10: " 236
RPARENT ) 236
SEMICOLON ; 236
IFSYM if 237
LPARENT ( 237
INTEGER 0 237
RPARENT ) 237
RETURNSYM return 238
SEMICOLON ; 238
ELSESYM else 239
IDENT test18 240
LPARENT ( 240
RPARENT ) 240
SEMICOLON ; 240
RBRACE } 241
VOIDSYM void 243
IDENT test22 243
LPARENT ( 243
RPARENT ) 243
LBRACE { 244
INTSYM int 245
IDENT i 245
SEMICOLON ; 245
IDENT i 246
BECOME = 246
INTEGER 1 246
SEMICOLON ; 246
PRINTFSYM printf 247
LPARENT ( 247
STRING "test22" 247
RPARENT ) 247
SEMICOLON ; 247
PRINTFSYM printf 248
LPARENT ( 248
STRING " 1: " 248
RPARENT ) 248
SEMICOLON ; 248
WHILESYM while 249
LPARENT ( 249
IDENT i 249
RPARENT ) 249
IFSYM if 250
LPARENT ( 250
IDENT i 250
RPARENT ) 250
LBRACE { 251
PRINTFSYM printf 252
LPARENT ( 252
STRING "111 " 252
RPARENT ) 252
SEMICOLON ; 252
IDENT i 253
BECOME = 253
INTEGER 0 253
SEMICOLON ; 253
RBRACE } 254
IDENT i 255
BECOME = 255
INTEGER 1 255
SEMICOLON ; 255
PRINTFSYM printf 256
LPARENT ( 256
STRING " 2: " 256
RPARENT ) 256
SEMICOLON ; 256
WHILESYM while 257
LPARENT ( 257
IDENT i 257
RPARENT ) 257
WHILESYM while 258
LPARENT ( 258
IDENT i 258
RPARENT ) 258
IDENT i 259
BECOME = 259
INTEGER 0 259
SEMICOLON ; 259
IDENT i 260
BECOME = 260
INTEGER 1 260
SEMICOLON ; 260
PRINTFSYM printf 261
LPARENT ( 261
STRING " 3: " 261
RPARENT ) 261
SEMICOLON ; 261
WHILESYM while 262
LPARENT ( 262
IDENT i 262
RPARENT ) 262
LBRACE { 263
IDENT i 264
BECOME = 264
INTEGER 0 264
SEMICOLON ; 264
RBRACE } 265
IDENT i 266
BECOME = 266
INTEGER 1 266
SEMICOLON ; 266
PRINTFSYM printf 267
LPARENT ( 267
STRING " 4: " 267
RPARENT ) 267
SEMICOLON ; 267
WHILESYM while 268
LPARENT ( 268
IDENT i 268
RPARENT ) 268
LBRACE { 269
PRINTFSYM printf 270
LPARENT ( 270
IDENT test18 270
LPARENT ( 270
RPARENT ) 270
RPARENT ) 270
SEMICOLON ; 270
IDENT i 271
BECOME = 271
INTEGER 0 271
SEMICOLON ; 271
RBRACE } 272
IDENT i 273
BECOME = 273
INTEGER 1 273
SEMICOLON ; 273
PRINTFSYM printf 274
LPARENT ( 274
STRING " 5: " 274
RPARENT ) 274
SEMICOLON ; 274
WHILESYM while 275
LPARENT ( 275
IDENT i 275
RPARENT ) 275
IDENT i 276
BECOME = 276
INTEGER 0 276
SEMICOLON ; 276
IDENT i 277
BECOME = 277
INTEGER 1 277
SEMICOLON ; 277
PRINTFSYM printf 278
LPARENT ( 278
STRING " 6: " 278
RPARENT ) 278
SEMICOLON ; 278
WHILESYM while 279
LPARENT ( 279
IDENT i 279
RPARENT ) 279
SCANFSYM scanf 280
LPARENT ( 280
IDENT i 280
RPARENT ) 280
SEMICOLON ; 280
PRINTFSYM printf 281
LPARENT ( 281
STRING " 7: " 281
RPARENT ) 281
SEMICOLON ; 281
WHILESYM while 282
LPARENT ( 282
IDENT i 282
RPARENT ) 282
PRINTFSYM printf 283
LPARENT ( 283
STRING "aaa " 283
RPARENT ) 283
SEMICOLON ; 283
PRINTFSYM printf 284
LPARENT ( 284
STRING " 8: " 284
RPARENT ) 284
SEMICOLON ; 284
WHILESYM while 285
LPARENT ( 285
IDENT i 285
RPARENT ) 285
SEMICOLON ; 285
IDENT i 286
BECOME = 286
INTEGER 1 286
SEMICOLON ; 286
WHILESYM while 287
LPARENT ( 287
IDENT i 287
RPARENT ) 287
SWITCHSYM switch 288
LPARENT ( 288
IDENT i 288
RPARENT ) 288
LBRACE { 289
CASESYM case 290
INTEGER 1 290
COLON : 290
IDENT i 290
BECOME = 290
INTEGER 0 290
SEMICOLON ; 290
CASESYM case 291
INTEGER 2 291
COLON : 291
IDENT i 291
BECOME = 291
INTEGER 0 291
SEMICOLON ; 291
RBRACE } 292
IDENT i 293
BECOME = 293
INTEGER 1 293
SEMICOLON ; 293
WHILESYM while 294
LPARENT ( 294
IDENT i 294
RPARENT ) 294
RETURNSYM return 295
SEMICOLON ; 295
RBRACE } 296
VOIDSYM void 298
IDENT test23 298
LPARENT ( 298
RPARENT ) 298
LBRACE { 299
INTSYM int 300
IDENT i 300
COMMA , 300
IDENT j 300
SEMICOLON ; 300
IDENT i 301
BECOME = 301
INTEGER 0 301
SEMICOLON ; 301
IDENT j 302
BECOME = 302
INTEGER 1 302
SEMICOLON ; 302
PRINTFSYM printf 303
LPARENT ( 303
STRING "test23" 303
RPARENT ) 303
SEMICOLON ; 303
WHILESYM while 304
LPARENT ( 304
IDENT i 304
LESS < 304
INTEGER 12 304
RPARENT ) 304
LBRACE { 305
PRINTFSYM printf 306
LPARENT ( 306
STRING " " 306
COMMA , 306
IDENT i 306
RPARENT ) 306
SEMICOLON ; 306
PRINTFSYM printf 307
LPARENT ( 307
STRING " " 307
RPARENT ) 307
SEMICOLON ; 307
SWITCHSYM switch 308
LPARENT ( 308
IDENT i 308
RPARENT ) 308
LBRACE { 309
CASESYM case 310
INTEGER 0 310
COLON : 310
LBRACE { 311
RBRACE } 313
CASESYM case 314
INTEGER 1 314
COLON : 314
IFSYM if 315
LPARENT ( 315
IDENT i 315
GREATER > 315
INTEGER 0 315
RPARENT ) 315
PRINTFSYM printf 316
LPARENT ( 316
STRING " aaa " 316
RPARENT ) 316
SEMICOLON ; 316
CASESYM case 317
INTEGER 2 317
COLON : 317
IFSYM if 318
LPARENT ( 318
IDENT i 318
GREATER > 318
INTEGER 5 318
RPARENT ) 318
PRINTFSYM printf 319
LPARENT ( 319
STRING " aaa " 319
RPARENT ) 319
SEMICOLON ; 319
ELSESYM else 320
PRINTFSYM printf 321
LPARENT ( 321
STRING " bbb " 321
RPARENT ) 321
SEMICOLON ; 321
CASESYM case 322
INTEGER 3 322
COLON : 322
WHILESYM while 323
LPARENT ( 323
IDENT j 323
RPARENT ) 323
IDENT j 324
BECOME = 324
INTEGER 0 324
SEMICOLON ; 324
CASESYM case 325
INTEGER 4 325
COLON : 325
IDENT test17 326
LPARENT ( 326
RPARENT ) 326
SEMICOLON ; 326
CASESYM case 327
INTEGER 5 327
COLON : 327
IDENT test18 328
LPARENT ( 328
RPARENT ) 328
SEMICOLON ; 328
CASESYM case 329
INTEGER 6 329
COLON : 329
IDENT j 330
BECOME = 330
INTEGER 1 330
SEMICOLON ; 330
CASESYM case 331
INTEGER 7 331
COLON : 331
SCANFSYM scanf 332
LPARENT ( 332
IDENT j 332
RPARENT ) 332
SEMICOLON ; 332
CASESYM case 333
INTEGER 8 333
COLON : 333
PRINTFSYM printf 334
LPARENT ( 334
STRING " 888 " 334
RPARENT ) 334
SEMICOLON ; 334
CASESYM case 335
INTEGER 9 335
COLON : 335
SEMICOLON ; 335
CASESYM case 336
INTEGER 10 336
COLON : 336
SWITCHSYM switch 337
LPARENT ( 337
IDENT i 337
RPARENT ) 337
LBRACE { 338
CASESYM case 339
INTEGER 10 339
COLON : 339
PRINTFSYM printf 340
LPARENT ( 340
STRING " 101010 " 340
RPARENT ) 340
SEMICOLON ; 340
RBRACE } 341
CASESYM case 342
INTEGER 11 342
COLON : 342
RETURNSYM return 343
SEMICOLON ; 343
RBRACE } 344
IDENT i 345
BECOME = 345
IDENT i 345
PLUSSYM + 345
INTEGER 1 345
SEMICOLON ; 345
RBRACE } 346
RBRACE } 347
VOIDSYM void 349
MAINSYM main 349
LPARENT ( 349
RPARENT ) 349
LBRACE { 350
INTSYM int 351
IDENT n 351
SEMICOLON ; 351
IDENT n 352
BECOME = 352
INTEGER 1 352
SEMICOLON ; 352
WHILESYM while 353
LPARENT ( 353
IDENT n 353
RPARENT ) 353
LBRACE { 354
SCANFSYM scanf 355
LPARENT ( 355
IDENT n 355
RPARENT ) 355
SEMICOLON ; 355
SWITCHSYM switch 356
LPARENT ( 356
IDENT n 356
RPARENT ) 356
LBRACE { 357
CASESYM case 358
INTEGER 1 358
COLON : 358
LBRACE { 359
PRINTFSYM printf 360
LPARENT ( 360
STRING " ===test9=== " 360
RPARENT ) 360
SEMICOLON ; 360
IDENT test9 361
LPARENT ( 361
RPARENT ) 361
SEMICOLON ; 361
RBRACE } 362
CASESYM case 363
INTEGER 2 363
COLON : 363
LBRACE { 364
IDENT test10 365
LPARENT ( 365
RPARENT ) 365
SEMICOLON ; 365
PRINTFSYM printf 366
LPARENT ( 366
STRING " ===test11=== " 366
RPARENT ) 366
SEMICOLON ; 366
IDENT test11 367
LPARENT ( 367
RPARENT ) 367
SEMICOLON ; 367
RBRACE } 368
CASESYM case 369
INTEGER 3 369
COLON : 369
LBRACE { 370
PRINTFSYM printf 371
LPARENT ( 371
STRING " ===test12=== " 371
RPARENT ) 371
SEMICOLON ; 371
IDENT test12 372
LPARENT ( 372
IDENT test12 372
LPARENT ( 372
IDENT test12 372
LPARENT ( 372
IDENT test12 372
LPARENT ( 372
IDENT test12 372
LPARENT ( 372
INTEGER 5 372
RPARENT ) 372
RPARENT ) 372
RPARENT ) 372
RPARENT ) 372
RPARENT ) 372
SEMICOLON ; 372
RBRACE } 373
CASESYM case 374
INTEGER 4 374
COLON : 374
LBRACE { 375
PRINTFSYM printf 376
LPARENT ( 376
STRING " ===test14=== " 376
RPARENT ) 376
SEMICOLON ; 376
PRINTFSYM printf 377
LPARENT ( 377
IDENT test13 377
LPARENT ( 377
IDENT test14 377
LPARENT ( 377
INTEGER 1 377
RPARENT ) 377
COMMA , 377
FLOAT 0.5 377
COMMA , 377
IDENT test15 377
LPARENT ( 377
RPARENT ) 377
RPARENT ) 377
MULSYM * 377
IDENT test14 377
LPARENT ( 377
INTEGER 0 377
RPARENT ) 377
RPARENT ) 377
SEMICOLON ; 377
RBRACE } 378
CASESYM case 379
INTEGER 5 379
COLON : 379
LBRACE { 380
PRINTFSYM printf 381
LPARENT ( 381
STRING " ===test1=== " 381
RPARENT ) 381
SEMICOLON ; 381
IDENT test1 382
LPARENT ( 382
INTEGER 1 382
COMMA , 382
CHARACTER 'a' 382
COMMA , 382
FLOAT 0.9 382
RPARENT ) 382
SEMICOLON ; 382
RBRACE } 383
CASESYM case 384
INTEGER 6 384
COLON : 384
LBRACE { 385
PRINTFSYM printf 386
LPARENT ( 386
STRING " ===test_2=== " 386
RPARENT ) 386
SEMICOLON ; 386
IDENT TEst_2 387
LPARENT ( 387
INTEGER 5 387
RPARENT ) 387
SEMICOLON ; 387
RBRACE } 388
CASESYM case 389
INTEGER 7 389
COLON : 389
LBRACE { 390
PRINTFSYM printf 391
LPARENT ( 391
STRING " ===test3=== " 391
RPARENT ) 391
SEMICOLON ; 391
IDENT test3 392
LPARENT ( 392
RPARENT ) 392
SEMICOLON ; 392
RBRACE } 393
CASESYM case 394
INTEGER 8 394
COLON : 394
LBRACE { 395
PRINTFSYM printf 396
LPARENT ( 396
STRING " ===test6=== " 396
RPARENT ) 396
SEMICOLON ; 396
PRINTFSYM printf 397
LPARENT ( 397
IDENT test6 397
LPARENT ( 397
RPARENT ) 397
RPARENT ) 397
SEMICOLON ; 397
RBRACE } 398
CASESYM case 399
INTEGER 9 399
COLON : 399
LBRACE { 400
PRINTFSYM printf 401
LPARENT ( 401
STRING " ===test4=== " 401
RPARENT ) 401
SEMICOLON ; 401
IDENT test4 402
LPARENT ( 402
RPARENT ) 402
SEMICOLON ; 402
RBRACE } 403
CASESYM case 404
INTEGER 10 404
COLON : 404
LBRACE { 405
PRINTFSYM printf 406
LPARENT ( 406
STRING " ===test21=== " 406
RPARENT ) 406
SEMICOLON ; 406
IDENT test21 407
LPARENT ( 407
RPARENT ) 407
SEMICOLON ; 407
PRINTFSYM printf 408
LPARENT ( 408
STRING "sadasd" 408
RPARENT ) 408
SEMICOLON ; 408
RBRACE } 409
CASESYM case 410
INTEGER 11 410
COLON : 410
LBRACE { 411
PRINTFSYM printf 412
LPARENT ( 412
STRING " ===test22=== " 412
RPARENT ) 412
SEMICOLON ; 412
IDENT test22 413
LPARENT ( 413
RPARENT ) 413
SEMICOLON ; 413
RBRACE } 414
CASESYM case 415
INTEGER 12 415
COLON : 415
LBRACE { 416
PRINTFSYM printf 417
LPARENT ( 417
STRING " ===test23=== " 417
RPARENT ) 417
SEMICOLON ; 417
IDENT test23 418
LPARENT ( 418
RPARENT ) 418
SEMICOLON ; 418
RBRACE } 419
CASESYM case 420
INTEGER 13 420
COLON : 420
LBRACE { 421
IDENT n 422
BECOME = 422
INTEGER 0 422
SEMICOLON ; 422
RBRACE } 423
RBRACE } 424
RBRACE } 427
RBRACE } 428
