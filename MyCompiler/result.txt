FLOATSYM float 1
IDENT cal_power 1
LPARENT ( 1
INTSYM int 1
IDENT n 1
COMMA , 1
FLOATSYM float 1
IDENT a 1
RPARENT ) 1
LBRACE { 1
INTSYM int 2
IDENT i 2
SEMICOLON ; 2
FLOATSYM float 3
IDENT res 3
SEMICOLON ; 3
IDENT i 4
BECOME = 4
INTEGER 0 4
SEMICOLON ; 4
IDENT res 5
BECOME = 5
INTEGER 1 5
SEMICOLON ; 5
IFSYM if 6
LPARENT ( 6
IDENT n 6
LESS < 6
INTEGER 0 6
RPARENT ) 6
LBRACE { 6
RETURNSYM return 7
LPARENT ( 7
INTEGER 0 7
RPARENT ) 7
SEMICOLON ; 7
RBRACE } 8
ELSESYM else 9
LBRACE { 9
WHILESYM while 10
LPARENT ( 10
IDENT i 10
LESS < 10
IDENT n 10
RPARENT ) 10
LBRACE { 10
IDENT res 11
BECOME = 11
IDENT res 11
MULSYM * 11
IDENT a 11
SEMICOLON ; 11
IDENT i 12
BECOME = 12
IDENT i 12
PLUSSYM + 12
INTEGER 1 12
SEMICOLON ; 12
RBRACE } 13
RBRACE } 14
RETURNSYM return 16
LPARENT ( 16
IDENT res 16
RPARENT ) 16
SEMICOLON ; 16
RBRACE } 17
VOIDSYM void 19
MAINSYM main 19
LPARENT ( 19
RPARENT ) 19
LBRACE { 19
INTSYM int 20
IDENT i 20
SEMICOLON ; 20
FLOATSYM float 21
IDENT a 21
SEMICOLON ; 21
INTSYM int 22
IDENT n 22
SEMICOLON ; 22
IDENT i 23
BECOME = 23
INTEGER 0 23
SEMICOLON ; 23
WHILESYM while 24
LPARENT ( 24
IDENT i 24
LESS < 24
INTEGER 3 24
RPARENT ) 24
LBRACE { 24
SCANFSYM scanf 25
LPARENT ( 25
IDENT n 25
COMMA , 25
IDENT a 25
RPARENT ) 25
SEMICOLON ; 25
PRINTFSYM printf 26
LPARENT ( 26
STRING "a = " 26
COMMA , 26
IDENT a 26
RPARENT ) 26
SEMICOLON ; 26
PRINTFSYM printf 27
LPARENT ( 27
STRING "======" 27
RPARENT ) 27
SEMICOLON ; 27
PRINTFSYM printf 28
LPARENT ( 28
IDENT cal_power 28
LPARENT ( 28
IDENT n 28
COMMA , 28
IDENT a 28
RPARENT ) 28
RPARENT ) 28
SEMICOLON ; 28
RBRACE } 29
RBRACE } 30
