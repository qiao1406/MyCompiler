CONSTSYM const 1
FLOATSYM float 1
IDENT pi 1
BECOME = 1
FLOAT 3.14 1
SEMICOLON ; 1
CONSTSYM const 2
INTSYM int 2
IDENT a 2
BECOME = 2
INTEGER 5 2
COMMA , 2
IDENT b 2
BECOME = 2
INTEGER 6 2
SEMICOLON ; 2
INTSYM int 3
IDENT c 3
LBRACK [ 3
INTEGER 2 3
LBRACK ] 3
COMMA , 3
IDENT res 3
COMMA , 3
IDENT d 3
LBRACK [ 3
INTEGER 3 3
LBRACK ] 3
SEMICOLON ; 3
FLOATSYM float 4
IDENT f1 4
COMMA , 4
IDENT _root 4
SEMICOLON ; 4
CHARSYM char 5
IDENT ch 5
SEMICOLON ; 5
INTSYM int 6
IDENT add_two_nums 6
LPARENT ( 6
INTSYM int 6
IDENT a1 6
COMMA , 6
INTSYM int 6
IDENT a2 6
RPARENT ) 6
LBRACE { 6
RETURNSYM return 7
LPARENT ( 7
IDENT a1 7
PLUSSYM + 7
IDENT a2 7
RPARENT ) 7
SEMICOLON ; 7
RBRACE } 8
VOIDSYM void 9
IDENT print_hello 9
LPARENT ( 9
RPARENT ) 9
LBRACE { 9
CONSTSYM const 10
FLOATSYM float 10
IDENT f1 10
BECOME = 10
FLOAT 2.33 10
COMMA , 10
IDENT print_hello 10
BECOME = 10
FLOAT 6677.66441 10
SEMICOLON ; 10
CONSTSYM const 11
CHARSYM char 11
IDENT res 11
BECOME = 11
CHARACTER 'f' 11
SEMICOLON ; 11
INTSYM int 12
IDENT x 12
SEMICOLON ; 12
FLOATSYM float 13
IDENT lwt 13
LBRACK [ 13
INTEGER 25 13
LBRACK ] 13
COMMA , 13
IDENT lwt1 13
SEMICOLON ; 13
IDENT c 14
LBRACK [ 14
INTEGER 0 14
LBRACK ] 14
BECOME = 14
IDENT a 14
PLUSSYM + 14
IDENT b 14
MULSYM * 14
INTEGER 2 14
SEMICOLON ; 14
IDENT d 15
LBRACK [ 15
INTEGER 0 15
LBRACK ] 15
BECOME = 15
INTEGER 231 15
SEMICOLON ; 15
IDENT d 16
LBRACK [ 16
INTEGER 1 16
LBRACK ] 16
BECOME = 16
INTEGER 10 16
MULSYM * 16
INTEGER 23 16
SEMICOLON ; 16
IDENT d 17
LBRACK [ 17
INTEGER 2 17
LBRACK ] 17
BECOME = 17
INTEGER 5 17
SEMICOLON ; 17
IDENT _root 18
BECOME = 18
FLOAT 1.26 18
SEMICOLON ; 18
IDENT x 19
BECOME = 19
IDENT d 19
LBRACK [ 19
INTEGER 2 19
LBRACK ] 19
MULSYM * 19
IDENT d 19
LBRACK [ 19
IDENT b 19
SUBSYM - 19
IDENT a 19
LBRACK ] 19
SUBSYM - 19
IDENT d 19
LBRACK [ 19
IDENT a 19
PLUSSYM + 19
IDENT b 19
MULSYM * 19
INTEGER 2 19
SUBSYM - 19
IDENT c 19
LBRACK [ 19
INTEGER 0 19
LBRACK ] 19
LBRACK ] 19
SEMICOLON ; 19
IDENT lwt 20
LBRACK [ 20
INTEGER 1 20
LBRACK ] 20
BECOME = 20
LPARENT ( 20
INTEGER 1 20
PLUSSYM + 20
IDENT _root 20
RPARENT ) 20
MULSYM * 20
INTEGER 2 20
SUBSYM - 20
IDENT pi 20
DIVSYM / 20
IDENT x 20
SEMICOLON ; 20
PRINTFSYM printf 21
LPARENT ( 21
STRING "uiop" 21
RPARENT ) 21
SEMICOLON ; 21
PRINTFSYM printf 22
LPARENT ( 22
STRING "beihang" 22
COMMA , 22
IDENT lwt 22
LBRACK [ 22
INTEGER 1 22
LBRACK ] 22
RPARENT ) 22
SEMICOLON ; 22
RBRACE } 23
VOIDSYM void 24
MAINSYM main 24
LPARENT ( 24
RPARENT ) 24
LBRACE { 24
CONSTSYM const 25
FLOATSYM float 25
IDENT e 25
BECOME = 25
FLOAT 2.71 25
SEMICOLON ; 25
CHARSYM char 26
IDENT ch1 26
COMMA , 26
IDENT ch2 26
SEMICOLON ; 26
FLOATSYM float 27
IDENT sml_num 27
SEMICOLON ; 27
INTSYM int 28
IDENT x 28
COMMA , 28
IDENT y 28
SEMICOLON ; 28
INTSYM int 29
IDENT i 29
SEMICOLON ; 29
CHARSYM char 30
IDENT kp 30
LBRACK [ 30
INTEGER 23 30
LBRACK ] 30
SEMICOLON ; 30
IDENT i 31
BECOME = 31
INTEGER 2 31
SEMICOLON ; 31
IDENT x 32
BECOME = 32
IDENT i 32
PLUSSYM + 32
INTEGER 1 32
SEMICOLON ; 32
IDENT y 33
BECOME = 33
IDENT x 33
MULSYM * 33
IDENT i 33
PLUSSYM + 33
IDENT x 33
SEMICOLON ; 33
IDENT c 34
LBRACK [ 34
INTEGER 1 34
LBRACK ] 34
BECOME = 34
INTEGER 6 34
SEMICOLON ; 34
IDENT kp 35
LBRACK [ 35
IDENT x 35
MULSYM * 35
IDENT y 35
SUBSYM - 35
INTEGER 2 35
LBRACK ] 35
BECOME = 35
IDENT a 35
SEMICOLON ; 35
IDENT f1 36
BECOME = 36
IDENT e 36
SEMICOLON ; 36
IDENT print_hello 37
LPARENT ( 37
RPARENT ) 37
SEMICOLON ; 37
RBRACE } 38
