CONSTSYM const 1
FLOATSYM float 1
IDENT pi 1
BECOME = 1
FLOAT 3.14 1
SEMICOLON ; 1
CONSTSYM const 2
FLOATSYM float 2
IDENT fcon1 2
BECOME = 2
FLOAT 0.5 2
SEMICOLON ; 2
CONSTSYM const 3
INTSYM int 3
IDENT a 3
BECOME = 3
INTEGER -5 3
COMMA , 3
IDENT b 3
BECOME = 3
INTEGER 6 3
SEMICOLON ; 3
INTSYM int 4
IDENT c 4
LBRACK [ 4
INTEGER 2 4
LBRACK ] 4
COMMA , 4
IDENT res 4
COMMA , 4
IDENT d 4
LBRACK [ 4
INTEGER 3 4
LBRACK ] 4
SEMICOLON ; 4
FLOATSYM float 5
IDENT f1 5
COMMA , 5
IDENT _root 5
SEMICOLON ; 5
CHARSYM char 6
IDENT ch 6
SEMICOLON ; 6
INTSYM int 8
IDENT add_two_nums 8
LPARENT ( 8
INTSYM int 8
IDENT a1 8
COMMA , 8
INTSYM int 8
IDENT a2 8
RPARENT ) 8
LBRACE { 8
RETURNSYM return 9
LPARENT ( 9
IDENT a1 9
PLUSSYM + 9
IDENT a2 9
RPARENT ) 9
SEMICOLON ; 9
RBRACE } 10
FLOATSYM float 12
IDENT float_div 12
LPARENT ( 12
FLOATSYM float 12
IDENT f1 12
COMMA , 12
FLOATSYM float 12
IDENT f2 12
RPARENT ) 12
LBRACE { 12
IFSYM if 13
LPARENT ( 13
IDENT f2 13
EQUAL == 13
INTEGER 0 13
RPARENT ) 13
LBRACE { 13
PRINTFSYM printf 14
LPARENT ( 14
STRING "the f2 cannot be 0" 14
RPARENT ) 14
SEMICOLON ; 14
RETURNSYM return 15
LPARENT ( 15
INTEGER 0 15
RPARENT ) 15
SEMICOLON ; 15
RBRACE } 16
ELSESYM else 17
RETURNSYM return 18
LPARENT ( 18
IDENT f1 18
DIVSYM / 18
IDENT f2 18
RPARENT ) 18
SEMICOLON ; 18
RBRACE } 19
VOIDSYM void 21
IDENT print_hello 21
LPARENT ( 21
RPARENT ) 21
LBRACE { 21
IDENT ch 22
BECOME = 22
CHARACTER 'd' 22
SEMICOLON ; 22
PRINTFSYM printf 23
LPARENT ( 23
STRING "hello" 23
RPARENT ) 23
SEMICOLON ; 23
PRINTFSYM printf 24
LPARENT ( 24
STRING "worl" 24
COMMA , 24
IDENT ch 24
RPARENT ) 24
SEMICOLON ; 24
RBRACE } 25
CHARSYM char 27
IDENT get_lower 27
LPARENT ( 27
CHARSYM char 27
IDENT c 27
RPARENT ) 27
LBRACE { 27
IFSYM if 28
LPARENT ( 28
IDENT c 28
GREATER > 28
CHARACTER 'Z' 28
RPARENT ) 28
RETURNSYM return 29
LPARENT ( 29
CHARACTER '_' 29
RPARENT ) 29
SEMICOLON ; 29
ELSESYM else 30
LBRACE { 30
IFSYM if 31
LPARENT ( 31
IDENT c 31
LESS < 31
CHARACTER 'A' 31
RPARENT ) 31
RETURNSYM return 32
LPARENT ( 32
CHARACTER '_' 32
RPARENT ) 32
SEMICOLON ; 32
ELSESYM else 33
RETURNSYM return 34
LPARENT ( 34
IDENT c 34
RPARENT ) 34
SEMICOLON ; 34
RBRACE } 35
RBRACE } 37
INTSYM int 39
IDENT cal_fibonacci_val 39
LPARENT ( 39
INTSYM int 39
IDENT n 39
RPARENT ) 39
LBRACE { 39
IFSYM if 40
LPARENT ( 40
IDENT n 40
LESSEQUAL <= 40
INTEGER 2 40
RPARENT ) 40
RETURNSYM return 41
LPARENT ( 41
INTEGER 1 41
RPARENT ) 41
SEMICOLON ; 41
ELSESYM else 42
RETURNSYM return 43
LPARENT ( 43
IDENT cal_fibonacci_val 43
LPARENT ( 43
IDENT n 43
SUBSYM - 43
INTEGER 1 43
RPARENT ) 43
PLUSSYM + 43
IDENT cal_fibonacci_val 43
LPARENT ( 43
IDENT n 43
SUBSYM - 43
INTEGER 2 43
RPARENT ) 43
RPARENT ) 43
SEMICOLON ; 43
RBRACE } 44
VOIDSYM void 46
MAINSYM main 46
LPARENT ( 46
RPARENT ) 46
LBRACE { 46
PRINTFSYM printf 49
LPARENT ( 49
IDENT a 49
RPARENT ) 49
SEMICOLON ; 49
RBRACE } 50
