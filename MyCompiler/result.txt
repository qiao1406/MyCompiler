INTSYM int 1
IDENT cal_fibonacci_val 1
LPARENT ( 1
INTSYM int 1
IDENT n 1
RPARENT ) 1
LBRACE { 1
IFSYM if 2
LPARENT ( 2
IDENT n 2
LESSEQUAL <= 2
INTEGER 2 2
RPARENT ) 2
RETURNSYM return 3
LPARENT ( 3
INTEGER 1 3
RPARENT ) 3
SEMICOLON ; 3
ELSESYM else 4
RETURNSYM return 5
LPARENT ( 5
IDENT cal_fibonacci_val 5
LPARENT ( 5
IDENT n 5
SUBSYM - 5
INTEGER 1 5
RPARENT ) 5
PLUSSYM + 5
IDENT cal_fibonacci_val 5
LPARENT ( 5
IDENT n 5
SUBSYM - 5
INTEGER 2 5
RPARENT ) 5
RPARENT ) 5
SEMICOLON ; 5
RBRACE } 6
INTSYM int 8
IDENT cal_factor 8
LPARENT ( 8
INTSYM int 8
IDENT n 8
RPARENT ) 8
LBRACE { 8
IFSYM if 9
LPARENT ( 9
IDENT n 9
LESSEQUAL <= 9
INTEGER 1 9
RPARENT ) 9
RETURNSYM return 10
LPARENT ( 10
INTEGER 1 10
RPARENT ) 10
SEMICOLON ; 10
ELSESYM else 11
RETURNSYM return 12
LPARENT ( 12
IDENT n 12
MULSYM * 12
IDENT cal_factor 12
LPARENT ( 12
IDENT n 12
SUBSYM - 12
INTEGER 1 12
RPARENT ) 12
RPARENT ) 12
SEMICOLON ; 12
RBRACE } 13
VOIDSYM void 15
MAINSYM main 15
LPARENT ( 15
RPARENT ) 15
LBRACE { 15
INTSYM int 16
IDENT x 16
SEMICOLON ; 16
SCANFSYM scanf 17
LPARENT ( 17
IDENT x 17
RPARENT ) 17
SEMICOLON ; 17
PRINTFSYM printf 18
LPARENT ( 18
IDENT cal_fibonacci_val 18
LPARENT ( 18
IDENT x 18
RPARENT ) 18
RPARENT ) 18
SEMICOLON ; 18
RBRACE } 19
